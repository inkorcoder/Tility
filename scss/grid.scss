/*
	@module
		title: grid *n
		type: scss *n
		caption:
			p{ Модуль формирует сетку исходя из конфига bd{_config.scss} }p
		*n
*/

@import "config.scss";
@import "_calc.scss";

html, body {
	width: 100%; height: 100px;
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

/*@property
		name: box *n
		caption: p{ Класс bd{ .box } означает обертку. bd{ .box.width-960 } - обертку 
			шириной в width-960 пикселей, если скрин пользователя шире данного 
			значения, – блок позиционируется по центру, если меньше – 
			растягивается на всю ширину скрина. Ширина задается один раз и 
			берется из конфига (параметр bd{ $grid_sizes }). Каждое из этих 
			значений - это ширина обертки, которую Вы можете использовать. 
			Это и обертка шириной в 1400 пикселей (bd{ width-1400 }), и в 960 (bd{ width-960 }) 
		}p
		p{ Обертка является оболочкой, внутри которой должны размещаться ячейки. }p
		*n
*/
.box {
	display: flex;
	width: 100%;
	flex: 0 1 auto;
	flex-direction: row;
	flex-wrap: wrap;
	margin-left: auto;
	margin-right: auto;
}
@each $greed in $grid_sizes {
	.box.width-#{$greed} {
		max-width: #{$greed}px;
	}
}

/*@property
		name: col, clear-col, double-col *n
		caption: p{ Для того, чтобы раздробить блок на условные ячейки, 
			внутрь нужно поместить блок с классом bd{.col} или bd{.clear-col}. Класс 
			bd{.col} обозначает инлайн-блок, с внутренним отступом по бокам в 
			заданную величину пикселей (параметр bd{ $gutter }). 
		}p
		p{ [$gutter|<content here>|$gutter] }p
		p{ Дробить сетку на ячейки крайне просто, если Вы знаете азы 
			математики и умеете слогать. Для начала вы должны определиться, 
			на сколько ячеек Вы хотите разбить сетку. За это отвечает 
			параметр bd{ $grid_calc } .Например, Вы выбрали 12-колоночную 
			сетку. Это означает, что любая ячейка будет дробиться исходя 
			из соотношения ширины ячейки к общей ширине всех ячеек: класс 
			bd{ x2d12 } вставит ячейку шириной в 2/12 общей ширины обертки.
		}p
		p{ Плюшка: Вы так же можете использовать не только дроби со 
			знаменателем 12 (если Вы его выбрали), но и любые дроби, из 
			параметра bd{ $grid_calc }. Это может быть и bd{ .x1d2 }, и 
			bd{ .x2d6 }, и bd{ .x1d8 }, если эти дроби прописаны в 
			bd{ $grid_calc }.
		}p
		p{ Так же, существует возможность задать фиксированную ширину, 
			используя классы типа bd{ .width-fixed-50 }, bd{ .width-fixed-150 }, 
			которые обозначают фиксированную ширину блока в пикселях. 
			Значения берутся из параметра bd{ $fixed_widths }.
		}p
		p{ Обертка является оболочкой, внутри которой должны 
			размещаться ячейки. }p
		*n
*/
.col {
	display: inline-block;
	box-sizing: border-box;
	flex: 0 -1 auto;
	padding-left: $gutter;
	padding-right: $gutter;
	max-width: 100%;
	flex-basis: 100%;
}

/*@property
		name: offset-xXdD *n
		caption: p{ Задает смещение для элемента сетки относительно левого
			края. bd{xXdD} - обозначает величину отступа.
		}p
*/
@include grid-calc($grid_calc, '', on);

/*@property
		name: offset-off-[BRAKEPOINT] *n
		caption: p{ Убирает смещение элемента при заданой ширине страницы 
			bd{BRAKEPOINT}
		}p
*/
@each $prefix in $grid_prefixes {
	@media (max-width: #{nth($prefix,1)}px) {
		@include grid-calc($grid-calc, #{nth($prefix,2)});
		.offset-off#{nth($prefix,2)} {
			margin-left: 0;
		}
	}
}

@each $width in $fixed_widths {
	.width-fixed-#{$width} {
		width: #{$width}px;
		max-width: #{$width}px;
	}
}